/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package untisexamcalendar;

import com.google.api.services.calendar.model.CalendarListEntry;
import untisexamcalendar.googlecalendar.GoogleCalendarAPI;

import javax.swing.*;
import java.awt.Rectangle;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author EweLo
 */
public class MainFrame extends javax.swing.JFrame implements PropertyChangeListener {

    private Exams exams = new Exams();

    private ProgressMonitor progressMonitor;
    private Task task;

    /**
     * Creates new form MainFrame
     */
    public MainFrame(Untis untis) {
        initComponents();
        
        exams = untis.getExams();
        
        list.setListData(exams.toArray());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        exportButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        list.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list.setCellRenderer(new CheckListRenderer());
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        exportButton.setText("Export to Calendar");
        exportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exportButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 704, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportButton)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        int index = list.locationToIndex(evt.getPoint());
        Exam exam = (Exam) list.getModel().getElementAt(index);
        exam.setSelected(!exam.isSelected());
        Rectangle rect = list.getCellBounds(index, index);
        list.repaint(rect);
    }//GEN-LAST:event_listMouseClicked

    private void exportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportButtonActionPerformed
        
        progressMonitor = new ProgressMonitor(this,
                "Exporting exams...",
                "", 0, 100);
        progressMonitor.setProgress(0);
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();

    }//GEN-LAST:event_exportButtonActionPerformed

    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress" == evt.getPropertyName() ) {
            int progress = (Integer) evt.getNewValue();
            progressMonitor.setProgress(progress);
            String message =
                    String.format("Completed %d%%.\n", progress);
            progressMonitor.setNote(message);
            if (progressMonitor.isCanceled() || task.isDone()) {
                if (progressMonitor.isCanceled()) {
                    task.cancel(true);
                    System.out.println("Task canceled.\n");
                } else {
                    System.out.println("Task completed.\n");
                }
            }
        }

    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame(null).setVisible(true);
            }
        });
    }

    private Date convertToDateViaInstant(LocalDateTime dateToConvert) {
        return java.util.Date
                .from(dateToConvert.atZone(ZoneId.systemDefault())
                        .toInstant());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exportButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list;
    // End of variables declaration//GEN-END:variables

    class Task extends SwingWorker<Void, Void> {
        @Override
        public Void doInBackground() {
            //int progress = 0;
            setProgress(0);


            GoogleCalendarAPI calendarAPI = new GoogleCalendarAPI();
            try {
                calendarAPI.login();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(MainFrame.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (GeneralSecurityException e) {
                JOptionPane.showMessageDialog(MainFrame.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }

            try {
                List<CalendarListEntry> calendars = calendarAPI.getCalendars();
                ArrayList<String> possibilities = new ArrayList<>();

                calendars.forEach(calendarListEntry -> {
                    String name = calendarListEntry.getSummary();
                    System.out.println(name);

                    if (name.contains("fungen")) {
                        possibilities.add(0, name);
                    } else {
                        possibilities.add(name);
                    }
                });

                String s = (String) JOptionPane.showInputDialog(
                        MainFrame.this,
                        "Select Calendar:",
                        "Export Exams",
                        JOptionPane.PLAIN_MESSAGE,
                        null,
                        possibilities.toArray(),
                        possibilities.get(0));

                String calendarId = "primary";

                for (CalendarListEntry calendarListEntry : calendars) {
                    if (calendarListEntry.getSummary().equalsIgnoreCase(s)) {
                        calendarId = calendarListEntry.getId();
                    }
                }

                double mult = 100 / (exams.size() - 1);

                for (int i = 0; i < exams.size(); i++) {
                    Exam e = exams.get(i);

                    setProgress((int) (i * mult));
                    
                    if(e.isSelected()) calendarAPI.addEventToCalendar(e.toEvent(), calendarId);
                }

                progressMonitor.close();
                JOptionPane.showMessageDialog(MainFrame.this, "Exported Exams successfully!", "Units Exams", JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);


            } catch (IOException e) {
                JOptionPane.showMessageDialog(MainFrame.this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
            return null;
        }

        @Override
        public void done() {
            progressMonitor.setProgress(0);

        }
    }
}
